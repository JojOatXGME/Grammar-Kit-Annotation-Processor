name: Build Project

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]
  workflow_dispatch:
    inputs: {}

jobs:
  gradle-validation:

    name: Validate Gradle Wrapper
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1

  build:

    name: Build project
    runs-on: ubuntu-latest
    needs: gradle-validation

    steps:
    # Setup environment
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: 15
        distribution: adopt
    - name: Set up cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: "gradle-\
          ${{runner.os}}-\
          ${{hashFiles('gradle/wrapper/gradle-wrapper.properties')}}-\
          ${{hashFiles('**/*.gradle')}}"
    # Build
    - name: Build project
      id: gradle-build
      run: ./gradlew --stacktrace build writeMetadata
    # Upload artifacts and build reports
    - name: Upload build reports
      if: steps.gradle-build.outcome == 'success' || steps.gradle-build.outcome == 'failure'
      uses: actions/upload-artifact@v2
      with:
        name: build-reports
        path: build/reports/
        if-no-files-found: ignore
    - name: Upload build result
      uses: actions/upload-artifact@v2
      with:
        name: build-result
        path: build/libs/
        if-no-files-found: error
    - name: Upload metadata
      uses: actions/upload-artifact@v2
      with:
        name: metadata
        path: build/metadata/
        if-no-files-found: error

  release-draft:

    name: Update release drafts on GitHub
    runs-on: ubuntu-latest
    if: >
      ${{ needs.build.result == 'success' &&
          github.ref == 'refs/heads/master' &&
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      }}
    needs: build

    steps:
    # Download repository and artifacts
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download build result
      uses: actions/download-artifact@v2
      with:
        name: metadata
        path: build/metadata/
    - name: Download metadata
      uses: actions/download-artifact@v2
      with:
        name: build-result
        path: build/libs/
    # Get metadata
    - name: Read metadata
      id: metadata
      run: |
        echo "::set-output name=tagname::v$(cat build/metadata/version.txt)"
        echo "::set-output name=jarfile::$(cat build/metadata/jarfile.txt)"
        echo "::set-output name=jarname::$(basename "$(cat build/metadata/jarfile.txt)")"
    # Fail job if the release tag already exists and points to a different commit
    - name: Check release tag
      env:
        TAG_NAME: ${{ steps.metadata.outputs.tagname }}
      run: |
        if \
          git fetch --depth=1 origin tag "$TAG_NAME" && \
          [ "$(git rev-parse "$TAG_NAME")" != "$(git rev-parse HEAD)" ]
        then
          echo "::error::Tag '$TAG_NAME' already exists and points to a different commit"
          exit 1
        fi
    # Update release drafts
    - name: Update release drafts
      uses: actions/github-script@v4
      env:
        TAG_NAME: ${{ steps.metadata.outputs.tagname }}
        JAR_FILE: ${{ steps.metadata.outputs.jarfile }}
        JAR_NAME: ${{ steps.metadata.outputs.jarname }}
      with:
        script: |
          const fs = require('fs');
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const { TAG_NAME, JAR_FILE, JAR_NAME } = process.env;

          const listResponse = await github.repos.listReleases({owner, repo});
          for (const draft of listResponse.data.filter(r => r.draft)) {
            core.info(`Delete draft for '${draft.name}' (${draft.id})`);
            await github.repos.deleteRelease({owner, repo, release_id: draft.id});
          }

          core.info(`Create new draft for '${TAG_NAME}'`);
          const createResponse = await github.repos.createRelease({
            owner,
            repo,
            name: TAG_NAME,
            tag_name: TAG_NAME,
            target_commitish: context.sha,
            body: undefined,
            draft: true,
          });

          core.info(`Upload build result (release_id: ${createResponse.data.id})`);
          await github.repos.uploadReleaseAsset({
            owner,
            repo,
            release_id: createResponse.data.id,
            name: JAR_NAME,
            label: JAR_NAME,
            data: fs.readFileSync(JAR_FILE),
          });
